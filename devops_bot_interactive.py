import json
import time
import threading
import schedule
from datetime import datetime
import requests

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "6229491676:AAGkHZ3PU9NjEyCw8zz3qSxxVvPrbYYasrE"
CHAT_ID = 1876664038
PLAN_FILE = "devops_plan.json"

# === –ï–í–†–ï–ô–°–ö–ò–ï –ü–†–ê–ó–î–ù–ò–ö–ò ===
HOLIDAYS = {
    "2025-04-12", "2025-04-13", "2025-04-14", "2025-04-15", "2025-04-16", "2025-04-17", "2025-04-18",  # –ü–µ—Å–∞—Ö
    "2025-06-02", "2025-06-03",  # –®–∞–≤—É–æ—Ç
    "2025-10-01", "2025-10-02",  # –†–æ—à —Ö–∞-–®–∞–Ω–∞
    "2025-10-10",                # –ô–æ–º –ö–∏–ø—É—Ä
    "2025-10-15", "2025-10-16", "2025-10-17", "2025-10-18", "2025-10-19", "2025-10-20", "2025-10-21",  # –°—É–∫–∫–æ—Ç
    "2025-10-22"                 # –®–º–∏–Ω–∏ –ê—Ü–µ—Ä–µ—Ç
}

# === –ó–ê–ì–†–£–ó–ö–ê –ü–õ–ê–ù–ê ===
def load_plan():
    try:
        with open(PLAN_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∞]: {e}")
        return {}

# === –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ===
def send_message(text):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML"
    }
    try:
        requests.post(url, data=payload)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏]: {e}")

# === –°–ë–û–†–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ===
def format_task(task):
    lines = [f"<b>{task['title']}</b>"]
    for item in task["tasks"]:
        lines.append(f"‚Ä¢ {item}")
    return "\n".join(lines)

# === –ó–ê–î–ê–ù–ò–ï –ù–ê –£–¢–†–û ===
def morning_job():
    today = datetime.now().strftime("%Y-%m-%d")
    if today in HOLIDAYS:
        print(f"[{today}] –ï–≤—Ä–µ–π—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ ‚Äì –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    plan = load_plan()
    if today in plan and "morning" in plan[today]:
        msg = format_task(plan[today]["morning"])
        send_message(f"üïó <b>–£—Ç—Ä–µ–Ω–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ</b>\n\n{msg}")

# === –ó–ê–î–ê–ù–ò–ï –ù–ê –î–ï–ù–¨ ===
def afternoon_job():
    today = datetime.now().strftime("%Y-%m-%d")
    if today in HOLIDAYS:
        print(f"[{today}] –ï–≤—Ä–µ–π—Å–∫–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ ‚Äì –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    plan = load_plan()
    if today in plan and "afternoon" in plan[today]:
        msg = format_task(plan[today]["afternoon"])
        send_message(f"üïí <b>–î–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ</b>\n\n{msg}")

# === –†–ê–°–ü–ò–°–ê–ù–ò–ï ===
schedule.every().day.at("08:00").do(morning_job)
schedule.every().day.at("15:00").do(afternoon_job)

# === –ó–ê–ü–£–°–ö ===
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(30)

if __name__ == "__main__":
    print("DevOps –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    threading.Thread(target=run_scheduler).start()


import time
from flask import Flask, request

app = Flask(__name__)

# === –ö–æ–º–∞–Ω–¥—ã ===
def handle_command(text):
    today = datetime.now().date()
    if text.startswith("/plan"):
        parts = text.split()
        if len(parts) == 1:
            query_date = today
        elif parts[1].lower() == "–∑–∞–≤—Ç—Ä–∞":
            query_date = today + timedelta(days=1)
        else:
            try:
                query_date = datetime.strptime(parts[1], "%Y-%m-%d").date()
            except ValueError:
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π: /plan 2025-06-30"

        date_str = query_date.strftime("%Y-%m-%d")
        plan = load_plan()
        if date_str in HOLIDAYS:
            return f"üìÖ {date_str} ‚Äî –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –¥–µ–Ω—å. –ó–∞–¥–∞–Ω–∏–π –Ω–µ—Ç."
        if date_str in plan:
            morning = format_task(plan[date_str]["morning"])
            afternoon = format_task(plan[date_str]["afternoon"])
            return f"üìÖ –ü–ª–∞–Ω –Ω–∞ {date_str}\n\n<b>–£—Ç—Ä–æ:</b>\n{morning}\n\n<b>–î–µ–Ω—å:</b>\n{afternoon}"
        else:
            return f"‚ùå –ù–∞ {date_str} –∑–∞–¥–∞–Ω–∏—è –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã."
    else:
        return "ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É /plan"

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ Telegram ===
@app.route(f"/{TOKEN}", methods=["POST"])
def telegram_webhook():
    data = request.get_json()
    if "message" in data and "text" in data["message"]:
        chat_id = data["message"]["chat"]["id"]
        text = data["message"]["text"]
        response = handle_command(text)
        if response:
            send_message(response)
    return {"ok": True}

# === –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ ===
def run_webhook():
    app.run(host="0.0.0.0", port=5000)

# –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
if __name__ == "__main__":
    import threading
    print("DevOps –±–æ—Ç —Å –≤–µ–±—Ö—É–∫–æ–º –∑–∞–ø—É—â–µ–Ω.")
    threading.Thread(target=run_scheduler).start()
    threading.Thread(target=run_webhook).start()